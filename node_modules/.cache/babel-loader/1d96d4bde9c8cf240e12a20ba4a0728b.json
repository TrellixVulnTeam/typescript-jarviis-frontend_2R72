{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emma0\\\\workspace\\\\typescript-jarviis-frontend\\\\src\\\\features\\\\history\\\\components\\\\HistoryMap.js\";\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\nimport { useState, React, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction HistoryMap() {\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        setState(prev => ({ ...prev,\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => ({ ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => ({ ...prev,\n        errMsg: \"현재 위치를 찾을수없습니다.\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: state.center,\n      style: {\n        // 지도의 크기\n        width: \"95%\",\n        height: \"450px\"\n      },\n      level: 3 // 지도의 확대 레벨\n      ,\n      children: !state.isLoading && /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: state.center\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\nexport default HistoryMap;","map":{"version":3,"sources":["C:/Users/emma0/workspace/typescript-jarviis-frontend/src/features/history/components/HistoryMap.js"],"names":["Map","MapMarker","useState","React","useEffect","HistoryMap","state","setState","center","lat","lng","errMsg","isLoading","navigator","geolocation","getCurrentPosition","position","prev","coords","latitude","longitude","err","message","width","height"],"mappings":";AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,sBAA/B;AACA,SAAQC,QAAR,EAAkBC,KAAlB,EAAyBC,SAAzB,QAAyC,OAAzC;;;;AAEA,SAASC,UAAT,GAAqB;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AACjCM,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAE,SADC;AAENC,MAAAA,GAAG,EAAE;AAFC,KADyB;AAKjCC,IAAAA,MAAM,EAAE,IALyB;AAMjCC,IAAAA,SAAS,EAAE;AANsB,GAAD,CAAlC;AASAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,CAACC,WAAd,EAA2B;AACzB;AACAD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;AACZT,QAAAA,QAAQ,CAAEU,IAAD,KAAW,EAClB,GAAGA,IADe;AAElBT,UAAAA,MAAM,EAAE;AACNC,YAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC,QADf;AACyB;AAC/BT,YAAAA,GAAG,EAAEM,QAAQ,CAACE,MAAT,CAAgBE,SAFf,CAE0B;;AAF1B,WAFU;AAMlBR,UAAAA,SAAS,EAAE;AANO,SAAX,CAAD,CAAR;AAQD,OAVH,EAWGS,GAAD,IAAS;AACPd,QAAAA,QAAQ,CAAEU,IAAD,KAAW,EAClB,GAAGA,IADe;AAElBN,UAAAA,MAAM,EAAEU,GAAG,CAACC,OAFM;AAGlBV,UAAAA,SAAS,EAAE;AAHO,SAAX,CAAD,CAAR;AAKD,OAjBH;AAmBD,KArBD,MAqBO;AACL;AACAL,MAAAA,QAAQ,CAAEU,IAAD,KAAW,EAClB,GAAGA,IADe;AAElBN,QAAAA,MAAM,EAAE,iBAFU;AAGlBC,QAAAA,SAAS,EAAE;AAHO,OAAX,CAAD,CAAR;AAKD;AACF,GA9BQ,EA8BN,EA9BM,CAAT;AAgCA,sBACE;AAAA,2BACE,QAAC,GAAD,CAAK;AAAL;AACE,MAAA,MAAM,EAAEN,KAAK,CAACE,MADhB;AAEE,MAAA,KAAK,EAAE;AACL;AACAe,QAAAA,KAAK,EAAE,KAFF;AAGLC,QAAAA,MAAM,EAAE;AAHH,OAFT;AAOE,MAAA,KAAK,EAAE,CAPT,CAOY;AAPZ;AAAA,gBASG,CAAClB,KAAK,CAACM,SAAP,iBACC,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAEN,KAAK,CAACE;AAA3B;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAkBD;;AACD,eAAeH,UAAf","sourcesContent":["import { Map, MapMarker } from 'react-kakao-maps-sdk';\nimport {useState, React, useEffect} from 'react'\n\nfunction HistoryMap(){\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667,\n    },\n    errMsg: null,\n    isLoading: true,\n  })\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setState((prev) => ({\n            ...prev,\n            center: {\n              lat: position.coords.latitude, // 위도\n              lng: position.coords.longitude, // 경도\n            },\n            isLoading: false,\n          }))\n        },\n        (err) => {\n          setState((prev) => ({\n            ...prev,\n            errMsg: err.message,\n            isLoading: false,\n          }))\n        }\n      )\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState((prev) => ({\n        ...prev,\n        errMsg: \"현재 위치를 찾을수없습니다.\",\n        isLoading: false,\n      }))\n    }\n  }, [])\n\n  return (\n    <>\n      <Map // 지도를 표시할 Container\n        center={state.center}\n        style={{\n          // 지도의 크기\n          width: \"95%\",\n          height: \"450px\",\n        }}\n        level={3} // 지도의 확대 레벨\n      >\n        {!state.isLoading && (\n          <MapMarker position={state.center}>\n          </MapMarker>\n        )}\n      </Map>\n    </>\n  )\n}\nexport default HistoryMap;"]},"metadata":{},"sourceType":"module"}