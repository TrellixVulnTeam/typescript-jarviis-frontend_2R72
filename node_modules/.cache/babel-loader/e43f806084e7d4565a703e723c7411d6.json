{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\"; //받아오는 데이터//\n\nconst initialState = {\n  userLoading: false,\n  userData: null,\n  error: null\n};\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    // Login\n    loginRequest(state, _action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    loginSuccess(state, action) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    loginFailure(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    //join\n    joinRequest(state, action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    joinSuccess(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    joinFailure(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    //modify\n    modifyRequest(state, action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    modifySuccess(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    modifyFailure(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    //exist\n    existRequest(state, action) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    existSuccess(state, action) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n\n    existFailure(state, action) {\n      state.userLoading = true;\n      state.error = null;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    user: userSlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = userSlice;\nexport const {\n  modifyRequest,\n  modifyFailure,\n  modifySuccess,\n  existFailure,\n  existRequest,\n  existSuccess,\n  loginRequest,\n  loginSuccess,\n  loginFailure,\n  joinFailure,\n  joinRequest,\n  joinSuccess\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/emma0/workspace/typescript-jarviis-frontend/src/features/user/reducer/userSlice.ts"],"names":["configureStore","createSlice","initialState","userLoading","userData","error","userSlice","name","reducers","loginRequest","state","_action","loginSuccess","action","payload","loginFailure","joinRequest","joinSuccess","joinFailure","modifyRequest","modifySuccess","modifyFailure","existRequest","existSuccess","existFailure","store","reducer","user","actions"],"mappings":"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","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n//받아오는 데이터//\nexport interface UserDataPayload {\n  data: {\n    user: {\n      username: string;\n      email: string;\n      phone: string;\n      address: string;\n      password: string;\n      birth: string;\n    }\n  }\n}\n//요청하는 데이터\nexport interface ExistPayload{\n  email: string;\n}\nexport interface RemovePayload {\n  email: string;\n  password: string;\n}\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\nexport interface ModifyPayload {\n  email: string;\n  phone: string;\n  address: string;\n  password: string;\n  birth: string;\n}\nexport interface JoinPayload {\n  username: string;\n  email: string;\n  phone: string;\n  address: string;\n  password: string;\n  birth: string;\n  job: string;\n  user_interests: string;\n}\n//미들웨어\nexport interface UserState {\n  userLoading: boolean;\n  userData: any;\n  error: any;\n}\n// api의 param 타입\nexport interface ParamType {\n  email: number;\n}\nconst initialState: UserState = {\n  userLoading: false,\n  userData: null,\n  error: null,\n};\n\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    // Login\n    loginRequest(state: UserState, _action: PayloadAction<LoginPayload>) {\n      state.userLoading = true;\n      state.error = null;\n    },\n\n    loginSuccess(state: UserState, action: PayloadAction<UserDataPayload>) {\n      state.userLoading = false;\n      state.userData = action.payload;\n    },\n\n    loginFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    //join\n    joinRequest(state: UserState, action: PayloadAction<JoinPayload>) {\n\n      state.userLoading = true;\n      state.error = null;\n    },\n    joinSuccess(state: UserState, action: PayloadAction<UserDataPayload>) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    joinFailure(state: UserState, action: PayloadAction<{ error: any }>) {\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n     //modify\n    modifyRequest(state: UserState, action: PayloadAction<ModifyPayload>){\n      state.userLoading = true;\n      state.error = null;\n    },\n    modifySuccess(state: UserState, action: PayloadAction<UserDataPayload>){\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    modifyFailure(state: UserState, action: PayloadAction<{ error: any }>){\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    //exist\n    existRequest(state: UserState, action:PayloadAction<ExistPayload>){\n      state.userLoading = true;\n      state.error = null;\n    },\n    existSuccess(state: UserState, action: PayloadAction<UserDataPayload>){\n      state.userLoading = false;\n      state.error = action.payload;\n    },\n    existFailure(state: UserState, action: PayloadAction<{ error: any }>){\n      state.userLoading = true;\n      state.error = null;\n    }\n\n  },\n});\n\nconst store = configureStore({\n  reducer: {\n    user: userSlice.reducer,\n  },\n});\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = userSlice;\nexport const {\n  modifyRequest,\n  modifyFailure,\n  modifySuccess,\n  existFailure,\n  existRequest,\n  existSuccess,\n  loginRequest,\n  loginSuccess,\n  loginFailure,\n  joinFailure,\n  joinRequest,\n  joinSuccess,\n} = actions;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}