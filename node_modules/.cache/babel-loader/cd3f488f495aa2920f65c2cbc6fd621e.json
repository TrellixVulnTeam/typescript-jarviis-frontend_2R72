{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emma0\\\\workspace\\\\typescript-jarviis-frontend\\\\src\\\\features\\\\chatbot\\\\components\\\\Chatbot.js\";\nimport React from \"react\";\nimport { styled } from '@mui/material/styles';\nimport Avatar from '@mui/material/Avatar';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport InputBase from '@mui/material/InputBase';\nimport \"features/chatbot/style/ChatStyle.scss\";\nimport ReactDOM from 'react-dom';\nimport chat from \"features/chatbot/images/chatbot (1).png\";\nimport { animate } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chatbot() {\n  const some = () => {\n    var x = document.getElementById(\"chatbot\");\n\n    if (x.style.display === \"block\") {\n      x.style.display = \"none\";\n    } else {\n      x.style.display = \"block\";\n    }\n  };\n\n  function scrollToBottom() {\n    chatRef.current.scrollTop = chatRef.current.scrollHeight;\n  }\n\n  const chatRef = useRef({});\n  /* detect url in a message and add a link tag */\n\n  function detectURL(message) {\n    var urlRegex = /(((https?:\\/\\/)|(www\\.))[^\\s]+)/g;\n    return message.replace(urlRegex, function (urlMatch) {\n      return '<a href=\"' + urlMatch + '\">' + urlMatch + '</a>';\n    });\n  }\n  /* ========== */\n\n  /* Title component */\n\n\n  class Title extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatApp__convTitle\",\n        children: [this.props.owner, \"'s display\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 4\n      }, this);\n    }\n\n  }\n  /* end Title component */\n\n  /* ========== */\n\n  /* ========== */\n\n  /* InputMessage component - used to type the message */\n\n\n  class InputMessage extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      this.handleSendMessage = this.handleSendMessage.bind(this);\n      this.handleTyping = this.handleTyping.bind(this);\n    }\n\n    handleSendMessage(event) {\n      event.preventDefault();\n      /* Disable sendMessage if the message is empty */\n\n      if (this.messageInput.value.length > 0) {\n        this.props.sendMessageLoading(this.ownerInput.value, this.ownerAvatarInput.value, this.messageInput.value);\n        /* Reset input after send*/\n\n        this.messageInput.value = '';\n      }\n    }\n\n    handleTyping(event) {\n      /* Tell users when another user has at least started to write */\n      if (this.messageInput.value.length > 0) {\n        this.props.typing(this.ownerInput.value);\n      } else {\n        /* When there is no more character, the user no longer writes */\n        this.props.resetTyping(this.ownerInput.value);\n      }\n    }\n\n    render() {\n      /* If the chatbox state is loading, loading class for display */\n      var loadingClass = this.props.isLoading ? 'chatApp__convButton--loading' : '';\n\n      let sendButtonIcon = /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"material-icons\",\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 24\n      }, this);\n\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"hidden\",\n          ref: owner => this.ownerInput = owner,\n          value: this.props.owner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"hidden\",\n          ref: ownerAvatar => this.ownerAvatarInput = ownerAvatar,\n          value: this.props.ownerAvatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: message => this.messageInput = message,\n          className: \"chatApp__convInput\",\n          placeholder: \"Text message\",\n          onKeyDown: this.handleTyping,\n          onKeyUp: this.handleTyping,\n          tabIndex: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'chatApp__convButton ' + loadingClass,\n          onClick: this.handleSendMessage,\n          children: sendButtonIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 4\n      }, this);\n    }\n\n  }\n  /* end InputMessage component */\n\n  /* ========== */\n\n  /* ========== */\n\n  /* TypingIndicator component */\n\n\n  class TypingIndicator extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n    }\n\n    render() {\n      let typersDisplay = '';\n      let countTypers = 0;\n      /* for each user writing messages in chatroom */\n\n      for (var key in this.props.isTyping) {\n        /* retrieve the name if it isn't the owner of the chatbox */\n        if (key != this.props.owner && this.props.isTyping[key]) {\n          typersDisplay += ', ' + key;\n          countTypers++;\n        }\n      }\n      /* formatting text */\n\n\n      typersDisplay = typersDisplay.substr(1);\n      typersDisplay += countTypers > 1 ? ' are ' : ' is ';\n      /* if at least one other person writes */\n\n      if (countTypers > 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatApp__convTyping\",\n          children: [typersDisplay, \" writing\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chatApp__convTypingDot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 5\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatApp__convTyping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 4\n      }, this);\n    }\n\n  }\n  /* end TypingIndicator component */\n\n  /* ========== */\n\n  /* ========== */\n\n  /* MessageList component - contains all messages */\n\n\n  class MessageList extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatApp__convTimeline\",\n        children: this.props.messages.slice(0).reverse().map(messageItem => /*#__PURE__*/_jsxDEV(MessageItem, {\n          owner: this.props.owner,\n          sender: messageItem.sender,\n          senderAvatar: messageItem.senderAvatar,\n          message: messageItem.message\n        }, messageItem.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 6\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 4\n      }, this);\n    }\n\n  }\n  /* end MessageList component */\n\n  /* ========== */\n\n  /* ========== */\n\n  /* MessageItem component - composed of a message and the sender's avatar */\n\n\n  class MessageItem extends React.Component {\n    render() {\n      /* message position formatting - right if I'm the author */\n      let messagePosition = this.props.owner == this.props.sender ? 'chatApp__convMessageItem--right' : 'chatApp__convMessageItem--left';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatApp__convMessageItem \" + messagePosition + \" clearfix\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.props.senderAvatar,\n          alt: this.props.sender,\n          className: \"chatApp__convMessageAvatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatApp__convMessageValue\",\n          dangerouslySetInnerHTML: {\n            __html: this.props.message\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 4\n      }, this);\n    }\n\n  }\n  /* end MessageItem component */\n\n  /* ========== */\n\n  /* ========== */\n\n  /* ChatBox component - composed of Title, MessageList, TypingIndicator, InputMessage */\n\n\n  class ChatBox extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      this.state = {\n        isLoading: false\n      };\n      this.sendMessageLoading = this.sendMessageLoading.bind(this);\n      var timeout = null;\n    }\n    /* catch the sendMessage signal and update the loading state then continues the sending instruction */\n\n\n    sendMessageLoading(sender, senderAvatar, message) {\n      this.setState({\n        isLoading: true\n      });\n      this.props.sendMessage(sender, senderAvatar, message);\n      setTimeout(() => {\n        this.setState({\n          isLoading: false\n        });\n      }, 400);\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatApp__conv\",\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          owner: this.props.owner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n          owner: this.props.owner,\n          messages: this.props.messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatApp__convSendMessage clearfix\",\n          children: [/*#__PURE__*/_jsxDEV(TypingIndicator, {\n            owner: this.props.owner,\n            isTyping: this.props.isTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(InputMessage, {\n            isLoading: this.state.isLoading,\n            owner: this.props.owner,\n            ownerAvatar: this.props.ownerAvatar,\n            sendMessage: this.props.sendMessage,\n            sendMessageLoading: this.sendMessageLoading,\n            typing: this.props.typing,\n            resetTyping: this.props.resetTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 4\n      }, this);\n    }\n\n  }\n  /* end ChatBox component */\n\n  /* ========== */\n\n  /* ========== */\n\n  /* ChatRoom component - composed of multiple ChatBoxes */\n\n\n  class ChatRoom extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      this.state = {\n        messages: [{\n          id: 1,\n          sender: 'Shun',\n          senderAvatar: chat,\n          message: '뭘 도와드릴까요 👋'\n        }, {\n          id: 2,\n          sender: 'Gabe',\n          senderAvatar: 'https://i.pravatar.cc/150?img=56',\n          message: '비밀번호 변경하는 방법 알려줘'\n        }, {\n          id: 3,\n          sender: 'Shun',\n          senderAvatar: chat,\n          message: '넹! 어쩌고 저쩌고 지짜고 🙃'\n        }, {\n          id: 4,\n          sender: 'Gabe',\n          senderAvatar: 'https://i.pravatar.cc/150?img=56',\n          message: '고마워 챗봇!🍻'\n        }],\n        isTyping: []\n      };\n      this.sendMessage = this.sendMessage.bind(this);\n      this.typing = this.typing.bind(this);\n      this.resetTyping = this.resetTyping.bind(this);\n    }\n    /* adds a new message to the chatroom */\n\n\n    sendMessage(sender, senderAvatar, message) {\n      setTimeout(() => {\n        let messageFormat = detectURL(message);\n        let newMessageItem = {\n          id: this.state.messages.length + 1,\n          sender: sender,\n          senderAvatar: senderAvatar,\n          message: messageFormat\n        };\n        this.setState({\n          messages: [...this.state.messages, newMessageItem]\n        });\n        this.resetTyping(sender);\n      }, 400);\n    }\n    /* updates the writing indicator if not already displayed */\n\n\n    typing(writer) {\n      if (!this.state.isTyping[writer]) {\n        let stateTyping = this.state.isTyping;\n        stateTyping[writer] = true;\n        this.setState({\n          isTyping: stateTyping\n        });\n      }\n    }\n    /* hide the writing indicator */\n\n\n    resetTyping(writer) {\n      let stateTyping = this.state.isTyping;\n      stateTyping[writer] = false;\n      this.setState({\n        isTyping: stateTyping\n      });\n    }\n\n    render() {\n      let users = {};\n      let chatBoxes = [];\n      let messages = this.state.messages;\n      let isTyping = this.state.isTyping;\n      let sendMessage = this.sendMessage;\n      let typing = this.typing;\n      let resetTyping = this.resetTyping;\n      /* user details - can add as many users as desired */\n      // users[0] = { name: 'Shun', avatar: 'https://i.pravatar.cc/150?img=32' };\n\n      users[1] = {\n        name: 'Gabe',\n        avatar: 'https://i.pravatar.cc/150?img=56'\n      };\n      /* test with two other users :)\n      users[2] = { name: 'Kate', avatar: 'https://i.pravatar.cc/150?img=47' };\n      users[3] = { name: 'Patrick', avatar: 'https://i.pravatar.cc/150?img=14' };\n      */\n\n      /* creation of a chatbox for each user present in the chatroom */\n\n      Object.keys(users).map(function (key) {\n        var user = users[key];\n        chatBoxes.push( /*#__PURE__*/_jsxDEV(ChatBox, {\n          owner: user.name,\n          ownerAvatar: user.avatar,\n          sendMessage: sendMessage,\n          typing: typing,\n          resetTyping: resetTyping,\n          messages: messages,\n          isTyping: isTyping\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 5\n        }, this));\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatApp__room\",\n        children: chatBoxes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 4\n      }, this);\n    }\n\n  }\n  /* end ChatRoom component */\n\n  /* ========== */\n\n  /* render the chatroom */\n\n\n  setTimeout(() => {\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(ChatRoom, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 18\n    }, this), document.getElementById(\"chatApp\"));\n  }, 400);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => some(),\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        class: \"pulsate-bck\",\n        style: {\n          marginLeft: \"159px\",\n          width: '30%',\n          cursor: \"pointer\"\n        },\n        src: require(\"features/common/images/chatbot.png\").default\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbotTxT\",\n      id: \"chatbot\",\n      style: {\n        display: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"chatApp\",\n        class: \"chatApp\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"chatApp__loaderWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"chatApp__loaderText\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"chatApp__loader\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/emma0/workspace/typescript-jarviis-frontend/src/features/chatbot/components/Chatbot.js"],"names":["React","styled","Avatar","Icon","IconButton","Paper","Typography","clsx","useEffect","useRef","useState","useDispatch","useSelector","InputBase","ReactDOM","chat","animate","Chatbot","some","x","document","getElementById","style","display","scrollToBottom","chatRef","current","scrollTop","scrollHeight","detectURL","message","urlRegex","replace","urlMatch","Title","Component","constructor","props","context","render","owner","InputMessage","handleSendMessage","bind","handleTyping","event","preventDefault","messageInput","value","length","sendMessageLoading","ownerInput","ownerAvatarInput","typing","resetTyping","loadingClass","isLoading","sendButtonIcon","ownerAvatar","TypingIndicator","typersDisplay","countTypers","key","isTyping","substr","MessageList","messages","slice","reverse","map","messageItem","sender","senderAvatar","id","MessageItem","messagePosition","__html","ChatBox","state","timeout","setState","sendMessage","setTimeout","ChatRoom","messageFormat","newMessageItem","writer","stateTyping","users","chatBoxes","name","avatar","Object","keys","user","push","marginLeft","width","cursor","require","default"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { styled } from '@mui/material/styles';\nimport Avatar from '@mui/material/Avatar';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport InputBase from '@mui/material/InputBase';\nimport \"features/chatbot/style/ChatStyle.scss\"\nimport ReactDOM from 'react-dom'\nimport chat from \"features/chatbot/images/chatbot (1).png\"\nimport { animate } from \"framer-motion\";\n\nexport default function Chatbot() {\n    const some = () => {\n        var x = document.getElementById(\"chatbot\");\n        if (x.style.display === \"block\") {\n            x.style.display = \"none\";\n        } else {\n            x.style.display = \"block\";\n        }\n    };\n    function scrollToBottom() {\n        chatRef.current.scrollTop = chatRef.current.scrollHeight;\n    }\n    const chatRef = useRef({});  \n\n\n\n    /* detect url in a message and add a link tag */\nfunction detectURL(message) {\n\tvar urlRegex = /(((https?:\\/\\/)|(www\\.))[^\\s]+)/g;\n\treturn message.replace(urlRegex, function(urlMatch) {\n\t\treturn '<a href=\"' + urlMatch + '\">' + urlMatch + '</a>';\n\t})\n}\n\n/* ========== */\n/* Title component */\nclass Title extends React.Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className={\"chatApp__convTitle\"}>{this.props.owner}'s display</div>\n\t\t);\n\t}\n}\n/* end Title component */\n/* ========== */\n\n/* ========== */\n/* InputMessage component - used to type the message */\nclass InputMessage extends React.Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.handleSendMessage = this.handleSendMessage.bind(this);\n\t\tthis.handleTyping = this.handleTyping.bind(this);\n\t}\n\thandleSendMessage(event) {\n\t\tevent.preventDefault();\n\t\t/* Disable sendMessage if the message is empty */\n\t\tif( this.messageInput.value.length > 0 ) {\n\t\t\tthis.props.sendMessageLoading(this.ownerInput.value, this.ownerAvatarInput.value, this.messageInput.value);\n\t\t\t/* Reset input after send*/\n\t\t\tthis.messageInput.value = '';\n\t\t}\n\t}\n\thandleTyping(event) {\n\t\t/* Tell users when another user has at least started to write */\n\t\tif( this.messageInput.value.length > 0 ) {\n\t\t\tthis.props.typing(this.ownerInput.value);\n\t\t}\n\t\telse {\n\t\t\t/* When there is no more character, the user no longer writes */\n\t\t\tthis.props.resetTyping(this.ownerInput.value);\n\t\t}\n\t}\n\trender() {\n\t\t/* If the chatbox state is loading, loading class for display */\n\t\tvar loadingClass = this.props.isLoading ? 'chatApp__convButton--loading' : '';\n\t\tlet sendButtonIcon = <i className={\"material-icons\"}>send</i>;\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSendMessage}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"hidden\"\n\t\t\t\t\tref={owner => (this.ownerInput = owner)}\n\t\t\t\t\tvalue={this.props.owner}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"hidden\"\n\t\t\t\t\tref={ownerAvatar => (this.ownerAvatarInput = ownerAvatar)}\n\t\t\t\t\tvalue={this.props.ownerAvatar}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tref={message => (this.messageInput = message)}\n\t\t\t\t\tclassName={\"chatApp__convInput\"}\n\t\t\t\t\tplaceholder=\"Text message\"\n\t\t\t\t\tonKeyDown={this.handleTyping}\n\t\t\t\t\tonKeyUp={this.handleTyping}\n\t\t\t\t\ttabIndex=\"0\"\n\t\t\t\t/>\n\t\t\t\t<div className={'chatApp__convButton ' + loadingClass} onClick={this.handleSendMessage}>\n\t\t\t\t{sendButtonIcon}\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n/* end InputMessage component */\n/* ========== */\n\n/* ========== */\n/* TypingIndicator component */\nclass TypingIndicator extends React.Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\trender() {\n\t\tlet typersDisplay = '';\n\t\tlet countTypers = 0;\n\t\t/* for each user writing messages in chatroom */\n\t\tfor ( var key in this.props.isTyping ) {\n\t\t\t/* retrieve the name if it isn't the owner of the chatbox */\n\t\t\tif( key != this.props.owner && this.props.isTyping[key] ) {\n\t\t\t\ttypersDisplay += ', ' + key;\n\t\t\t\tcountTypers++;\n\t\t\t}\n\t\t}\n\t\t/* formatting text */\n\t\ttypersDisplay = typersDisplay.substr(1);\n\t\ttypersDisplay += (( countTypers > 1 ) ? ' are ' : ' is ');\n\t\t/* if at least one other person writes */\n\t\tif ( countTypers > 0 ) {\n\t\t\treturn (\n\t\t\t\t<div className={\"chatApp__convTyping\"}>{typersDisplay} writing\n\t\t\t\t<span className={\"chatApp__convTypingDot\"}></span>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div className={\"chatApp__convTyping\"}></div>\n\t\t);\n\t}\n}\n/* end TypingIndicator component */\n/* ========== */\n\n/* ========== */\n/* MessageList component - contains all messages */\nclass MessageList extends React.Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className={\"chatApp__convTimeline\"}>\n\t\t\t{this.props.messages.slice(0).reverse().map(\n\t\t\t\tmessageItem => (\n\t\t\t\t\t<MessageItem\n\t\t\t\t\t\tkey={messageItem.id}\n\t\t\t\t\t\towner={this.props.owner}\n\t\t\t\t\t\tsender={messageItem.sender}\n\t\t\t\t\t\tsenderAvatar={messageItem.senderAvatar}\n\t\t\t\t\t\tmessage={messageItem.message}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n/* end MessageList component */\n/* ========== */\n\n/* ========== */\n/* MessageItem component - composed of a message and the sender's avatar */\nclass MessageItem extends React.Component {\n\trender() {\n\t\t/* message position formatting - right if I'm the author */\n\t\tlet messagePosition = (( this.props.owner == this.props.sender ) ? 'chatApp__convMessageItem--right' : 'chatApp__convMessageItem--left');\n\t\treturn (\n\t\t\t<div className={\"chatApp__convMessageItem \" + messagePosition + \" clearfix\"}>\n\t\t\t\t<img src={this.props.senderAvatar} alt={this.props.sender} className=\"chatApp__convMessageAvatar\" />\n\t\t\t\t<div className=\"chatApp__convMessageValue\" dangerouslySetInnerHTML={{__html: this.props.message}}></div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n/* end MessageItem component */\n/* ========== */\n\n/* ========== */\n/* ChatBox component - composed of Title, MessageList, TypingIndicator, InputMessage */\nclass ChatBox extends React.Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tisLoading: false\n\t\t};\n\t\tthis.sendMessageLoading = this.sendMessageLoading.bind(this);\n\t\tvar timeout = null;\n\t}\n\t/* catch the sendMessage signal and update the loading state then continues the sending instruction */\n\tsendMessageLoading(sender, senderAvatar, message) {\n\t\tthis.setState({ isLoading: true });\n\t\tthis.props.sendMessage(sender, senderAvatar, message);\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ isLoading: false });\n\t\t}, 400);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className={\"chatApp__conv\"}>\n\t\t\t\t<Title\n\t\t\t\t\towner={this.props.owner}\n\t\t\t\t/>\n\t\t\t\t<MessageList\n\t\t\t\t\towner={this.props.owner}\n\t\t\t\t\tmessages={this.props.messages}\n\t\t\t\t/>\n\t\t\t\t<div className={\"chatApp__convSendMessage clearfix\"}>\n\t\t\t\t\t<TypingIndicator\n\t\t\t\t\t\towner={this.props.owner}\n\t\t\t\t\t\tisTyping={this.props.isTyping}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputMessage\n\t\t\t\t\t\tisLoading={this.state.isLoading}\n\t\t\t\t\t\towner={this.props.owner}\n\t\t\t\t\t\townerAvatar={this.props.ownerAvatar}\n\t\t\t\t\t\tsendMessage={this.props.sendMessage}\n\t\t\t\t\t\tsendMessageLoading={this.sendMessageLoading}\n\t\t\t\t\t\ttyping={this.props.typing}\n\t\t\t\t\t\tresetTyping={this.props.resetTyping}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n/* end ChatBox component */\n/* ========== */\n\n/* ========== */\n/* ChatRoom component - composed of multiple ChatBoxes */\nclass ChatRoom extends React.Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tmessages: [{\n\t\t\t\tid: 1,\n\t\t\t\tsender: 'Shun',\n\t\t\t\tsenderAvatar: chat,\n\t\t\t\tmessage: '뭘 도와드릴까요 👋',\n\t\t\t\t\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tsender: 'Gabe',\n\t\t\t\tsenderAvatar: 'https://i.pravatar.cc/150?img=56',\n\t\t\t\tmessage: '비밀번호 변경하는 방법 알려줘'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tsender: 'Shun',\n\t\t\t\tsenderAvatar: chat,\n\t\t\t\tmessage: '넹! 어쩌고 저쩌고 지짜고 🙃'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 4,\n\t\t\t\tsender: 'Gabe',\n\t\t\t\tsenderAvatar: 'https://i.pravatar.cc/150?img=56',\n\t\t\t\tmessage: '고마워 챗봇!🍻'\n\t\t\t}\n\t\t\t],\n\t\t\tisTyping: [],\n\t\t};\n\t\tthis.sendMessage = this.sendMessage.bind(this);\n\t\tthis.typing = this.typing.bind(this);\n\t\tthis.resetTyping = this.resetTyping.bind(this);\n\t}\n\t/* adds a new message to the chatroom */\n\tsendMessage(sender, senderAvatar, message) {\n\t\tsetTimeout(() => {\n\t\t\tlet messageFormat = detectURL(message);\n\t\t\tlet newMessageItem = {\n\t\t\t\tid: this.state.messages.length + 1,\n\t\t\t\tsender: sender,\n\t\t\t\tsenderAvatar: senderAvatar,\n\t\t\t\tmessage: messageFormat\n\t\t\t};\n\t\t\tthis.setState({ messages: [...this.state.messages, newMessageItem] });\n\t\t\tthis.resetTyping(sender);\n\t\t}, 400);\n\t}\n\t/* updates the writing indicator if not already displayed */\n\ttyping(writer) {\n\t\tif( !this.state.isTyping[writer] ) {\n\t\t\tlet stateTyping = this.state.isTyping;\n\t\t\tstateTyping[writer] = true;\n\t\t\tthis.setState({ isTyping: stateTyping });\n\t\t}\n\t}\n\t/* hide the writing indicator */\n\tresetTyping(writer) {\n\t\tlet stateTyping = this.state.isTyping;\n\t\tstateTyping[writer] = false;\n\t\tthis.setState({ isTyping: stateTyping });\n\t}\n\trender() {\n\t\tlet users = {};\n\t\tlet chatBoxes = [];\n\t\tlet messages = this.state.messages;\n\t\tlet isTyping = this.state.isTyping;\n\t\tlet sendMessage = this.sendMessage;\n\t\tlet typing = this.typing;\n\t\tlet resetTyping = this.resetTyping;\n\n\t\t/* user details - can add as many users as desired */\n\t\t// users[0] = { name: 'Shun', avatar: 'https://i.pravatar.cc/150?img=32' };\n\t\tusers[1] = { name: 'Gabe', avatar: 'https://i.pravatar.cc/150?img=56' };\n\t\t/* test with two other users :)\n\t\tusers[2] = { name: 'Kate', avatar: 'https://i.pravatar.cc/150?img=47' };\n\t\tusers[3] = { name: 'Patrick', avatar: 'https://i.pravatar.cc/150?img=14' };\n\t\t*/\n\t\t\n\t\t/* creation of a chatbox for each user present in the chatroom */\n\t\tObject.keys(users).map(function(key) {\n\t\t\tvar user = users[key];\n\t\t\tchatBoxes.push(\n\t\t\t\t<ChatBox\n\t\t\t\t\tkey={key}\n\t\t\t\t\towner={user.name}\n\t\t\t\t\townerAvatar={user.avatar}\n\t\t\t\t\tsendMessage={sendMessage}\n\t\t\t\t\ttyping={typing}\n\t\t\t\t\tresetTyping={resetTyping}\n\t\t\t\t\tmessages={messages}\n\t\t\t\t\tisTyping={isTyping}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\treturn (\n\t\t\t<div className={\"chatApp__room\"}>\n\t\t\t\t{chatBoxes}\n\t\t\t</div>\n\t\t);\n\t}\n}\n/* end ChatRoom component */\n/* ========== */\n\n/* render the chatroom */\nsetTimeout(() => {\n\tReactDOM.render(<ChatRoom />, document.getElementById(\"chatApp\"));\n}, 400);\n\n    return (\n        <div>\n         <button onClick={() => some()}> <img class=\"pulsate-bck\" style={{ marginLeft: \"159px\", width: '30%', cursor: \"pointer\" }}\n                src={require(\"features/common/images/chatbot.png\").default} /></button>\n        <div\n                        className=\"chatbotTxT\"\n                        id=\"chatbot\"\n                        style={{\n                            display: \"none\",\n                        }}>\n           \n            <section id=\"chatApp\" class=\"chatApp\">\n                <div class=\"chatApp__loaderWrapper\">\n                    <div class=\"chatApp__loaderText\">Loading...</div>\n                    <div class=\"chatApp__loader\"></div>\n                </div>\n            </section>\n            </div>\n\n        </div>\n    );\n\n}\n"]},"metadata":{},"sourceType":"module"}