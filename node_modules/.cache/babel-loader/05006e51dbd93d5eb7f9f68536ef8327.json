{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { loginRequest, loginFailure, loginSuccess, joinSuccess, joinFailure, joinRequest, existSuccess, existFailure, existRequest, modifySuccess, modifyFailure } from \"features/user/reducer/userSlice\";\nimport { userAPI } from \"features/user\";\n\nfunction* exist(action) {\n  try {\n    const result = yield call(userAPI.existAPI, action.payload);\n    yield put(existSuccess(result));\n    alert(\"가능한 아이디입니다.\");\n  } catch (error) {\n    yield put(existFailure(error));\n    alert(\"쓸수없는 아이디입니다.\");\n  }\n}\n\nfunction* join(action) {\n  try {\n    const result = yield call(userAPI.joinAPI, action.payload);\n    yield put(joinSuccess(result));\n    window.location.href = 'users/login';\n  } catch (error) {\n    // alert(\"아이디오류\")\n    yield put(joinFailure(error));\n  }\n}\n\nfunction* login(action) {\n  try {\n    alert(\"보냈지롱\"); // fork는 비동기 call은 동기\n    // fork를 쓰면 불러온것들을 result에 넣어줘야 하는데 바로 다음코드가 실행됨\n    // 블로그에 있는 코드로는 yield 생성기 에러 자꾸남.... => const result = yield call(userAPI.join, action.payload);\n\n    const result = yield call(userAPI.loginAPI, action.payload);\n    alert(\"보냈지롱2\"); //요청 성공시\n\n    yield put(loginSuccess(result)); // alert(JSON.stringify(result.data.user.username))\n\n    window.localStorage.setItem('sessionUser', JSON.stringify(result.data.user.username));\n    window.location.href = \"/home\";\n  } catch (error) {\n    alert(JSON.stringify(action.payload));\n    alert(\"아이디 혹은 비밀번호가 틀렸습니다!\");\n    yield put(loginFailure(error));\n  }\n}\n\nfunction* modify(action) {\n  try {\n    const result = yield call(userAPI.modifyAPI, action.payload);\n    yield put(modifySuccess(result));\n  } catch (error) {\n    // alert(\"아이디오류\")\n    yield put(modifyFailure(error));\n  }\n} // Watch 함수\n\n\nexport function* watchLogin() {\n  yield takeLatest(loginRequest.type, login); // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n  // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n}\nexport function* watchJoin() {\n  yield takeLatest(joinRequest.type, join);\n}\nexport function* watchExist() {\n  yield takeLatest(existRequest.type, exist);\n}\nexport function* watchModify() {\n  yield takeLatest(existRequest.type, modify);\n}","map":{"version":3,"sources":["C:/Users/emma0/workspace/typescript-jarviis-frontend/src/features/user/module/userSaga.ts"],"names":["call","put","takeLatest","loginRequest","loginFailure","loginSuccess","joinSuccess","joinFailure","joinRequest","existSuccess","existFailure","existRequest","modifySuccess","modifyFailure","userAPI","exist","action","result","existAPI","payload","alert","error","join","joinAPI","window","location","href","login","loginAPI","localStorage","setItem","JSON","stringify","data","user","username","modify","modifyAPI","watchLogin","type","watchJoin","watchExist","watchModify"],"mappings":"AACA,SAASA,IAAT,EAAsBC,GAAtB,EAA2BC,UAA3B,QAA6C,oBAA7C;AACA,SAGEC,YAHF,EAIEC,YAJF,EAKEC,YALF,EAOEC,WAPF,EAQEC,WARF,EASEC,WATF,EAWEC,YAXF,EAYEC,YAZF,EAaEC,YAbF,EAeEC,aAfF,EAgBEC,aAhBF,QAiBO,iCAjBP;AAkBA,SAASC,OAAT,QAAyB,eAAzB;;AAGA,UAAUC,KAAV,CAAgBC,MAAhB,EAAoD;AAClD,MAAG;AACD,UAAMC,MAAwB,GAAG,MAAMjB,IAAI,CACzCc,OAAO,CAACI,QADiC,EAEzCF,MAAM,CAACG,OAFkC,CAA3C;AAIA,UAAMlB,GAAG,CAACQ,YAAY,CAACQ,MAAD,CAAb,CAAT;AACAG,IAAAA,KAAK,CAAC,aAAD,CAAL;AACD,GAPD,CAOE,OAAOC,KAAP,EAAkB;AAClB,UAAMpB,GAAG,CAACS,YAAY,CAACW,KAAD,CAAb,CAAT;AACAD,IAAAA,KAAK,CAAC,cAAD,CAAL;AACD;AACF;;AAGD,UAAUE,IAAV,CAAgBN,MAAhB,EAAmD;AACjD,MAAG;AACD,UAAMC,MAAwB,GAAG,MAAMjB,IAAI,CACzCc,OAAO,CAACS,OADiC,EAEzCP,MAAM,CAACG,OAFkC,CAA3C;AAIA,UAAMlB,GAAG,CAACK,WAAW,CAACW,MAAD,CAAZ,CAAT;AACAO,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,aAAvB;AACD,GAPD,CAOE,OAAOL,KAAP,EAAkB;AAClB;AACA,UAAMpB,GAAG,CAACM,WAAW,CAACc,KAAD,CAAZ,CAAT;AACD;AACF;;AACD,UAAUM,KAAV,CAAgBX,MAAhB,EAAqD;AACnD,MAAI;AACFI,IAAAA,KAAK,CAAC,MAAD,CAAL,CADE,CAEF;AACA;AACA;;AACA,UAAMH,MAAuB,GAAG,MAAMjB,IAAI,CACxCc,OAAO,CAACc,QADgC,EAExCZ,MAAM,CAACG,OAFiC,CAA1C;AAIEC,IAAAA,KAAK,CAAC,OAAD,CAAL,CATA,CAUF;;AACA,UAAMnB,GAAG,CAACI,YAAY,CAACY,MAAD,CAAb,CAAT,CAXE,CAYF;;AACAO,IAAAA,MAAM,CAACK,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,EAA2CC,IAAI,CAACC,SAAL,CAAef,MAAM,CAACgB,IAAP,CAAYC,IAAZ,CAAiBC,QAAhC,CAA3C;AACAX,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAsB,OAAtB;AACD,GAfD,CAeE,OAAOL,KAAP,EAAmB;AACnBD,IAAAA,KAAK,CAACW,IAAI,CAACC,SAAL,CAAehB,MAAM,CAACG,OAAtB,CAAD,CAAL;AACAC,IAAAA,KAAK,CAAC,qBAAD,CAAL;AACA,UAAMnB,GAAG,CAACG,YAAY,CAACiB,KAAD,CAAb,CAAT;AACD;AACF;;AACD,UAAUe,MAAV,CAAkBpB,MAAlB,EAAsD;AACpD,MAAG;AACD,UAAMC,MAAwB,GAAG,MAAMjB,IAAI,CACzCc,OAAO,CAACuB,SADiC,EAEzCrB,MAAM,CAACG,OAFkC,CAA3C;AAIA,UAAMlB,GAAG,CAACW,aAAa,CAACK,MAAD,CAAd,CAAT;AACD,GAND,CAME,OAAOI,KAAP,EAAkB;AAClB;AACA,UAAMpB,GAAG,CAACY,aAAa,CAACQ,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;;AACA,OAAO,UAAUiB,UAAV,GAAuB;AAC5B,QAAMpC,UAAU,CAACC,YAAY,CAACoC,IAAd,EAAoBZ,KAApB,CAAhB,CAD4B,CAE5B;AACA;AACD;AACD,OAAO,UAAUa,SAAV,GAAqB;AAC1B,QAAMtC,UAAU,CAACM,WAAW,CAAC+B,IAAb,EAAmBjB,IAAnB,CAAhB;AACD;AACD,OAAO,UAAUmB,UAAV,GAAsB;AAC3B,QAAMvC,UAAU,CAACS,YAAY,CAAC4B,IAAd,EAAoBxB,KAApB,CAAhB;AACD;AACD,OAAO,UAAU2B,WAAV,GAAuB;AAC5B,QAAMxC,UAAU,CAACS,YAAY,CAAC4B,IAAd,EAAoBH,MAApB,CAAhB;AACD","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, delay, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  LoginPayload,\n  UserDataPayload,\n  loginRequest,\n  loginFailure,\n  loginSuccess,\n  JoinPayload,\n  joinSuccess,\n  joinFailure,\n  joinRequest,\n  ExistPayload,\n  existSuccess,\n  existFailure,\n  existRequest,\n  ModifyPayload,\n  modifySuccess,\n  modifyFailure,\n} from \"features/user/reducer/userSlice\";\nimport { userAPI  } from \"features/user\";\nimport { func } from \"prop-types\";\n\nfunction* exist(action: PayloadAction<ExistPayload>){\n  try{\n    const result : UserDataPayload = yield call(\n      userAPI.existAPI,\n      action.payload\n    );\n    yield put(existSuccess(result));\n    alert(\"가능한 아이디입니다.\")\n  } catch (error: any){\n    yield put(existFailure(error))\n    alert(\"쓸수없는 아이디입니다.\")\n  }\n}\n\n\nfunction* join( action: PayloadAction<JoinPayload>){\n  try{\n    const result : UserDataPayload = yield call(\n      userAPI.joinAPI,\n      action.payload\n    );\n    yield put(joinSuccess(result));\n    window.location.href = 'users/login'\n  } catch (error: any){\n    // alert(\"아이디오류\")\n    yield put(joinFailure(error));\n  }\n}\nfunction* login(action: PayloadAction<LoginPayload>) {\n  try {\n    alert(\"보냈지롱\")\n    // fork는 비동기 call은 동기\n    // fork를 쓰면 불러온것들을 result에 넣어줘야 하는데 바로 다음코드가 실행됨\n    // 블로그에 있는 코드로는 yield 생성기 에러 자꾸남.... => const result = yield call(userAPI.join, action.payload);\n    const result: UserDataPayload = yield call(\n      userAPI.loginAPI,\n      action.payload\n      );\n      alert(\"보냈지롱2\")\n    //요청 성공시\n    yield put(loginSuccess(result));\n    // alert(JSON.stringify(result.data.user.username))\n    window.localStorage.setItem('sessionUser', JSON.stringify(result.data.user.username))\n    window.location.href= \"/home\"\n  } catch (error: any) {\n    alert(JSON.stringify(action.payload))\n    alert(\"아이디 혹은 비밀번호가 틀렸습니다!\")\n    yield put(loginFailure(error));\n  }\n}\nfunction* modify (action:PayloadAction<ModifyPayload>){\n  try{\n    const result : UserDataPayload = yield call(\n      userAPI.modifyAPI,\n      action.payload\n    );\n    yield put(modifySuccess(result));\n  } catch (error: any){\n    // alert(\"아이디오류\")\n    yield put(modifyFailure(error));\n  }\n}\n\n// Watch 함수\nexport function* watchLogin() {\n  yield takeLatest(loginRequest.type, login);\n  // loginRequest에서의 type이 실행되면 login함수가 실행되는데\n  // loginRequest의 action이 있으면 그 액션이 login함수의 인자로 들어갑니다.\n}\nexport function* watchJoin(){\n  yield takeLatest(joinRequest.type, join);\n}\nexport function* watchExist(){\n  yield takeLatest(existRequest.type, exist);\n}\nexport function* watchModify(){\n  yield takeLatest(existRequest.type, modify);\n}"]},"metadata":{},"sourceType":"module"}